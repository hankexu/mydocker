#! /bin/bash
hostname=$(hostname)

if [ -z "$CLUSTER_WITH" ] || [ "$CLUSTER_WITH" = "$hostname" ]; then
  rabbitmq-server &
  while [ ! -f "/var/log/rabbitmq/log/crash.log" ]; do
    echo "waiting"
    sleep 2s
  done
  echo "running"
  check_result=$(rabbitmqctl status)
  while [ -z "$check_result" ]; do
    check_result=$(rabbitmqctl status)
    sleep 5s
  done
  if [ "$RABBITMQ_DEFAULT_USER" ]; then
      if [ ! "$RABBITMQ_DEFAULT_PASS" ]; then
        RABBITMQ_DEFAULT_PASS=public
      fi
      rabbitmqctl add_user "$RABBITMQ_DEFAULT_USER" "$RABBITMQ_DEFAULT_PASS"
      rabbitmqctl set_user_tags "$RABBITMQ_DEFAULT_USER" administrator
      rabbitmqctl set_permissions "$RABBITMQ_DEFAULT_USER" '.*' '.*' '.*'
      rabbitmqctl set_policy ha-all "^" '{"ha-mode":"all"}'
  fi
  tail -f /var/log/rabbitmq/log/*
else
  echo "Running as clustered server"
  rabbitmq-server -detached
  while [ ! -f "/var/log/rabbitmq/log/crash.log" ]; do
    echo "waiting"
    sleep 2s
  done
  echo "running"
  rabbitmqctl stop_app
  echo $RABBITMQ_NODENAME@$CLUSTER_WITH
#
  echo "Joining cluster $CLUSTER_WITH"
  rabbitmqctl join_cluster ${ENABLE_RAM:+--ram} $RABBITMQ_NODENAME@$CLUSTER_WITH
#
  rabbitmqctl start_app
  tail -f /var/log/rabbitmq/log/*
fi
